generator client {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = "5"
  previewFeatures      = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model Workspace {
  id           String          @id @default(cuid())
  displayName  String
  name         String          @unique
  planId       String?
  ownerId      String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  bots         Bot[]
  businesses   Business[]
  payments     Payment[]
  sources      Source[]
  subscription Subscription?
  vectors      Vector[]
  users        WorkspaceUser[]
  owner        User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  plan         Plan?           @relation(fields: [planId], references: [id], onDelete: SetNull)

  @@index([id, planId])
  @@map("workspaces")
}

model WorkspaceUser {
  id          String    @id @default(cuid())
  workspaceId String
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("workspace_users")
}

model Model {
  id          String   @id @default(cuid())
  displayName String
  name        String   @unique
  planId      String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  bots        Bot[]
  plan        Plan?    @relation(fields: [planId], references: [id], onDelete: SetNull)

  @@map("models")
}

model Source {
  id            String       @id @default(cuid())
  workspaceId   String
  techniqueId   String?
  title         String
  url           String
  status        String
  contentType   String
  contentLength Int
  contentHash   String
  syncTime      Int
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  bots          BotSources[]
  technique     Technique?   @relation(fields: [techniqueId], references: [id])
  workspace     Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  syncs         Sync[]
  vectors       Vector[]

  @@map("sources")
}

model Sync {
  id          String    @id @default(cuid())
  sourceId    String
  message     String?
  status      String
  startedAt   DateTime?
  succeedAt   DateTime?
  errorAt     DateTime?
  cancelledAt DateTime?
  source      Source    @relation(fields: [sourceId], references: [id], onDelete: Cascade)

  @@map("syncs")
}

model Technique {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  planId      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sources     Source[]
  plan        Plan?    @relation(fields: [planId], references: [id])

  @@map("techniques")
}

model Vector {
  id           String                 @id @default(cuid())
  workspaceId  String
  sourceId     String
  embedding    Unsupported("vector")?
  chunkContent String
  metadata     Json
  chunkLength  Int
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  source       Source                 @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  workspace    Workspace              @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("vectors")
}

model Subscription {
  id          String    @id @default(cuid())
  workspaceId String    @unique
  planId      String?
  status      String
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  payments    Payment[]
  plan        Plan?     @relation(fields: [planId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Plan {
  id            String         @id @default(cuid())
  displayName   String
  name          String         @unique
  description   String?        @db.Text
  billingCycle  BillingCycle   @default(MONTHLY)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  models        Model[]
  features      PlanFeature[]
  subscriptions Subscription[]
  techniques    Technique[]
  workspaces    Workspace[]

  @@map("plans")
}

model PlanFeature {
  id          String   @id @default(cuid())
  planId      String
  name        String
  description String?
  allowed     Boolean  @default(true)
  createdAt   DateTime @default(now())
  plan        Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@map("plan_features")
}

model Payment {
  id              String         @id @default(cuid())
  workspaceId     String
  subscriptionId  String?
  amount          Float
  paymentMethodId String?
  status          PaymentStatus  @default(PENDING)
  paidAt          DateTime
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  invoices        Invoice[]
  paymentMethod   PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  subscription    Subscription?  @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)
  workspace       Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model PaymentMethod {
  id          String              @id @default(cuid())
  name        String              @unique
  displayName String
  status      PaymentMethodStatus @default(ACTIVE)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  payments    Payment[]

  @@map("payment_methods")
}

model Invoice {
  id          String   @id @default(cuid())
  paymentId   String?
  invoiceCode String
  issuedAt    DateTime
  dueDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  payment     Payment? @relation(fields: [paymentId], references: [id], onDelete: SetNull)

  @@map("invoices")
}

enum BillingCycle {
  MONTHLY
  YEARLY
  ONCE
  UNLIMITED
}

enum PaymentStatus {
  SUCCESS
  FAILED
  PENDING
}

enum PaymentMethodStatus {
  UNACTIVE
  ACTIVE
  FUTURE
}

enum ChatFeedback {
  DOWNVOTED
  UPVOTED
  NONE
}

model Chat {
  id             String       @id @default(cuid())
  conversationId String
  role           String
  content        String
  tokens         Int
  feedback       ChatFeedback @default(NONE)
  sourceURLs     String[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("chats")
}

model Conversation {
  id                String   @id @default(cuid())
  botId             String
  sessionId         String   @default(cuid())
  browser           String?
  os                String?
  device            String?
  countryCode       String?
  generatedCategory String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  chats             Chat[]
  bot               Bot      @relation(fields: [botId], references: [id], onDelete: Cascade)

  @@map("conversations")
}

model Business {
  id          String   @id @default(cuid())
  workspaceId String
  name        String
  type        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products       Product[]
  locations      Location[]
  categories     Category[]
  operatingHours OperatingHours[]

  hasDelivery    Boolean @default(false)
  hasPickup      Boolean @default(false)
  acceptsReturns Boolean @default(false)
  hasWarranty    Boolean @default(false)

  workspace      Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  configurations BusinessConfig?
  bot            Bot[]

  @@map("businesses")
}

model BusinessConfig {
  id                 String @id @default(cuid())
  businessId         String @unique
  deliveryFee        Float?
  minOrderAmount     Float?
  taxRate            Float?
  returnPeriodDays   Int?
  warrantyPeriodDays Int?
  currency           String @default("USD")

  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("business_configs")
}

model Category {
  id          String  @id @default(cuid())
  businessId  String
  name        String
  description String?

  business Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  products Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  businessId  String
  categoryId  String?
  name        String
  description String?
  price       Float
  stock       Int      @default(0)
  sku         String?
  images      String[]
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  business Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id])

  @@map("products")
}

model Location {
  id         String  @id @default(cuid())
  businessId String
  name       String
  address    String
  city       String
  state      String?
  country    String
  postalCode String?
  phone      String?
  email      String?
  isMain     Boolean @default(false)

  business Business         @relation(fields: [businessId], references: [id], onDelete: Cascade)
  hours    OperatingHours[]

  @@map("locations")
}

model OperatingHours {
  id         String  @id @default(cuid())
  businessId String
  locationId String?
  dayOfWeek  Int
  openTime   String
  closeTime  String
  isClosed   Boolean @default(false)

  business Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  location Location? @relation(fields: [locationId], references: [id])

  @@map("operating_hours")
}

model Bot {
  id                 String            @id @default(cuid())
  workspaceId        String
  name               String
  description        String?
  language           String?
  systemMessage      String?
  placeholderMessage String?
  welcomeMessage     String?
  starterQuestions   String[]
  modelId            String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  configurations     BotConfiguration?
  sources            BotSources[]
  model              Model?            @relation(fields: [modelId], references: [id], onDelete: SetNull)
  workspace          Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  conversations      Conversation[]
  business           Business?         @relation(fields: [businessId], references: [id])
  businessId         String?

  @@map("bots")
}

model BotConfiguration {
  id                 String   @id @default(cuid())
  botId              String   @unique
  avatarURL          String?
  uMessageColor      String?
  aMessageColor      String?
  fontId             String
  showSources        Boolean
  sendButtonText     String?
  customCSS          String?
  embedAngle         String?
  embedWidgetSize    String?
  embedWidgetIconURL String?
  embedAutoOpen      Boolean?
  embedPingMessage   String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  botChatAvatarURL   String?
  bot                Bot      @relation(fields: [botId], references: [id], onDelete: Cascade)

  @@map("bot_configuration")
}

model BotSources {
  id        String   @id @default(cuid())
  botId     String
  sourceId  String
  createdAt DateTime @default(now())
  bot       Bot      @relation(fields: [botId], references: [id], onDelete: Cascade)
  source    Source   @relation(fields: [sourceId], references: [id], onDelete: Cascade)

  @@map("bot_sources")
}

model User {
  id              String          @id @default(cuid())
  name            String?
  email           String          @unique
  password        String
  image           String?
  roleId          String?
  emailVerified   Boolean         @default(false)
  uplineId        String?
  lastLoggedAt    DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  sessions        Session[]
  roles           Role?           @relation(fields: [roleId], references: [id])
  upline          User?           @relation("UserUpline", fields: [uplineId], references: [id])
  downlines       User[]          @relation("UserUpline")
  workspaces      WorkspaceUser[]
  ownedWorkspaces Workspace[]

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  sessionToken String
  ipAddress    String?
  device       String?
  os           String?
  browser      String?
  status       String
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  displayName String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  permissions Permission[]
  Users       User[]

  @@map("roles")
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  roleId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  role        Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@map("permissions")
}
